@page "/"
@inject HttpClient Http
@using TabsClassLibrary

<nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top">
    <div class="container">
        <a class="navbar-brand d-flex align-items-center" href="/">
            <img src="images/honeycomb2.jpg" alt="Logo" style="width: 40px; height: auto;">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse w-100" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item px-4 text-center">
                    <a class="nav-link active" href="/">חיפוש</a>
                </li>
                <li class="nav-item px-4">
                    <a class="nav-link text-center" href="/mytabs">הטאבים שלי</a>
                </li>
                <li class="nav-item px-4">
                    <a class="nav-link text-center" href="/createtab">יצירת טאב</a>
                </li>
            </ul>
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link text-center" href="/signin">התחברות</a>
                </li>
            </ul>
        </div>
    </div>
</nav>






<!-- Separator Line -->
<hr class="my-1" />

<!-- Main Body -->
<div class="container mt-4 d-flex justify-content-center">
    <div class="card shadow" style="width: 45rem;">
        <div class="card-body">
            <!-- Search Section -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="mb-0">חיפוש טאבים</h2>
                <input type="text" class="form-control w-50" @oninput="OnSearchChanged" placeholder="חפש טאבים ממאגר השירים" />
            </div>

            <!-- Filter Section -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <span>סינון לפי:</span>
                <select class="form-select w-25" @onchange="OnFilterChanged">
                    <option value="all">כל הרמות</option>
                    <option value="easy">קל</option>
                    <option value="medium">בינוני</option>
                    <option value="hard">קשה</option>
                </select>
            </div>

            <!-- Divider -->
            <hr />

            <!-- Songs List -->
            <div class="list-group">
                @if (filteredSongs.Any())
                {
                    int index = 1;
                    @foreach (var song in filteredSongs)
                    {
                        <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <span class="me-3">@index.</span>
                                <div>
                                    <h5 class="mb-0">@song.Name</h5>
                                    <small>@song.Artist?.Name</small>
                                </div>
                            </div>
                            <!-- Difficulty Icon -->
                            <div>
                                @switch (GetDifficulty(song))
                                {
                                    case "easy":
                                        <img src="images/green_circle.jpg" alt="Easy" style="width: 20px; height: 20px;" />
                                        break;
                                    case "medium":
                                        <img src="images/orange_circle.png" alt="Medium" style="width: 20px; height: 20px;" />
                                        break;
                                    case "hard":
                                        <img src="images/red_circle3.jpg" alt="Hard" style="width: 20px; height: 20px;" />
                                        break;
                                }
                                <style>
                                    .list-group-item {
                                        border: none; /* Removes the borders around and between items */
                                        border-bottom: 1px solid transparent; /* Keeps spacing without visible borders */
                                        transition: background-color 0.2s ease;
                                    }

                                        .list-group-item:last-child {
                                            border-bottom: none; /* Ensures the last item has no bottom border */
                                        }

                                        .list-group-item:hover {
                                            background-color: #f9f9f9; /* Subtle hover effect */
                                        }
                                </style>

                            </div>
                        </a>
                        index++;
                    }
                }
                else
                {
                    <p class="text-center">לא נמצאו שירים.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string searchTerm = string.Empty;
    private string selectedFilter = "all";

    private List<Song> filteredSongs = new List<Song>();
    private List<Song> songs = new List<Song>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            songs = await Http.GetFromJsonAsync<List<Song>>("api/Songs");
            filteredSongs = songs; // Initialize filteredSongs with all songs
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching songs: {ex.Message}");
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        selectedFilter = e.Value?.ToString() ?? "all";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredSongs = songs
            .Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) &&
                        (selectedFilter == "all" || GetDifficulty(s) == selectedFilter))
            .ToList();
    }

    private string GetDifficulty(Song song)
    {
        // Replace this with actual difficulty logic from your backend or database
        if (song.Name.Contains("Imagine")) return "easy";
        if (song.Name.Contains("Let It Be")) return "medium";
        return "hard";
    }
}
