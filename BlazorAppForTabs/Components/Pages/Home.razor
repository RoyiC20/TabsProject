@page "/"
@inject HttpClient Http
@using TabsClassLibrary

<!-- Sticky Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top">
    <div class="container">
        <a class="navbar-brand" href="#">TabNest</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link active" href="/">חיפוש</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/mytabs">הטאבים שלי</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/createtab">יצירת טאב</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/signin">התחברות</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Separator Line -->
<hr class="my-3" />

<!-- main body -->
<div class="container mt-4 d-flex justify-content-center">
    <!-- Single Card for Search and Songs List -->
    <div class="card shadow" style="width: 50rem;">
        <div class="card-body">
            <!-- Search Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">חיפוש טאבים</h2>
                <input type="text" class="form-control w-50" @oninput="OnSearchChanged" placeholder="חפש טאבים ממאגר השירים" />
            </div>

            <!-- Divider -->
            <hr />

            <!-- Songs List -->
            <div class="list-group">
                @if (filteredSongs.Any())
                {
                    @foreach (var song in filteredSongs)
                    {
                        <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                            <div>
                                <h5>@song.Name</h5>
                                <small>@song.Artist?.Name</small>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <p>לא נמצאו שירים.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string searchTerm = string.Empty;

    private List<Song> filteredSongs = new List<Song>();

    private List<Song> songs = new List<Song>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            songs = await Http.GetFromJsonAsync<List<Song>>("api/Songs");
            filteredSongs = songs; // Initialize filteredSongs with all songs
            Console.WriteLine($"Fetched {songs.Count} songs from the API."); // Debug log
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching songs: {ex.Message}");
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        filteredSongs = songs
            .Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
}
