@page "/signin"
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveServer
@using TabsClassLibrary
@using BlazorAppForTabs.Services
@inject UserService UserService


<!-- Separator Line -->
<hr class="my-1" />

<div class="container d-flex justify-content-center align-items-center" style="height: 80vh;">
    <div class="card shadow" style="width: 22rem; background-color: #ffffff; color: #000;">
        <div class="card-body">
            <h4 class="card-title text-center mb-4">התחברות</h4>

            <!-- Sign In Form -->
            
                <!-- Username or Email Input -->
                <div class="mb-3">
                    <label for="Email" class="form-label">דוא"ל</label>
                    <input type="text" class="form-control" @bind="loginRequest.Email" id="Email" placeholder="הכנס דואל" />
                </div>

                <!-- Password Input -->
                <div class="mb-4">
                    <label for="password" class="form-label">סיסמה</label>
                    <input type="password" class="form-control" @bind="loginRequest.Password" id="password" placeholder="הכנס סיסמה" />
                </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center" role="alert">
                    @errorMessage
                </div>
            }


                <!-- Log In Button -->
                <div class="d-grid">
                    <button @onclick="HandleLogin" class="btn btn-warning text-dark fw-bold">התחבר</button > 
                </div>
            

            <!-- Sign Up Link -->
            <div class="text-center mt-3">
                <p class="mb-0">עדיין אין לך חשבון? <a href="/signup" class="text-warning">הרשם</a></p>
            </div>
        </div>
    </div>
</div>


@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine($"Attempting to log in with Email: {loginRequest.Email}, Password: {loginRequest.Password}"); // Debug: Input data

            var response = await Http.PostAsJsonAsync("api/Users/login", loginRequest);

            Console.WriteLine($"Response status code: {response.StatusCode}"); // Debug: Response status
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<LoginResponse>();
                Console.WriteLine($"Login successful: {user.UserID}");
                UserService.UserId = user.UserID;
                UserService.UserName = user.Name;
                UserService.Role = user.Role;
                Console.WriteLine($"User Role: {user.Role}");
                Navigation.NavigateTo("/", forceLoad: true); // Redirect after successful login
            }
            else
            {
                errorMessage = "שם משתמש או סיסמה שגויים";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "שגיאה בעת התחברות";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}