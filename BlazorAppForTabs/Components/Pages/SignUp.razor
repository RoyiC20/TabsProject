<!-- Sign Up Page -->
@page "/signup"
@inject NavigationManager Navigation
@inject HttpClient Http
@using TabsClassLibrary
@using BlazorAppForTabs.Services
@inject UserService UserService
@rendermode InteractiveServer

<hr class="my-1" />

<div class="container mt-5">
    <div class="card shadow-sm" style="max-width: 500px; margin: auto;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">הירשם</h3>

            <!-- Sign Up Form -->
            <form>
                <!-- Name Input -->
                <div class="mb-3">
                    <label for="name" class="form-label">שם משתמש</label>
                    <input type="text" id="name" @bind="name" class="form-control" placeholder="הכנס שם משתמש" />
                </div>

                <!-- Email Input -->
                <div class="mb-3">
                    <label for="email" class="form-label">דוא"ל</label>
                    <input type="email" id="email" @bind="email" class="form-control" placeholder="הכנס את הדואל" />
                </div>

                <!-- Password Input -->
                <div class="mb-3">
                    <label for="password" class="form-label">סיסמה</label>
                    <input type="password" id="password" @bind="password" class="form-control" placeholder="הכנס סיסמה" />
                </div>

                <!-- Error Message -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger text-center" role="alert">
                        @errorMessage
                    </div>
                }

                <!-- Submit Button -->
                <div class="d-grid">
                    <button type="button" @onclick="HandleRegister" class="btn btn-warning text-dark fw-bold">הירשם</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    private string name = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string role = "Student"; // Default role
    private string errorMessage = string.Empty;


    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    bool IsValidPassword(string password)
    {
        if (password.Length < 8)
            return false;

        bool hasUpperCase = password.Any(char.IsUpper);
        bool hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));

        return hasUpperCase && hasSpecialChar;
    }



    private async Task HandleRegister()
    {
        errorMessage = string.Empty;

        if (!IsValidPassword(password))
        {
            errorMessage = "הסיסמה חייבת להיות לפחות 8 תווים, להכיל אות גדולה אחת ולפחות תו מיוחד";
            return;
        }

        if (!IsValidEmail(email))
        {
            errorMessage = "כתובת האימייל לא תקינה";
            return;
        }
        var exists = await Http.GetFromJsonAsync<bool>($"api/Users/exists?email={email}");
        if (exists)
        {
            errorMessage = "אימייל זה כבר קיים במערכת";
            return;
        }



        try
        {
            var response = await Http.PostAsJsonAsync("api/Users/add", new
            {
                Name = name,
                Role = UserRole.Student,
                Email = email,
                Password = password
            });


            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<LoginResponse>();

                UserService.UserId = user.UserID;
                UserService.UserName = user.Name;
                UserService.Role = user.Role;

                Navigation.NavigateTo("/signin", forceLoad: true);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"הרשמה נכשלה: {errorContent}";
                Console.WriteLine($"Registration failed: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "שגיאה בעת ההרשמה. בדוק את החיבור ונסה שוב.";
            Console.WriteLine($"Error during registration: {ex.Message}");
        }
    }

}
